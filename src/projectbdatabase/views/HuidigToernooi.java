/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ProjectBdatabase.views;

import ProjectBdatabase.databaseUtil.Connector;
import ProjectBdatabase.models.SpelerPlek;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ruben
 */
public class HuidigToernooi extends javax.swing.JFrame {

    private HoofdScherm hoofdScherm;
    private static int peCode;
    private String naam;
    private String datum;
    private int aantalDeelnemers;
    private String huisnummer;
    private String postcode;
    private double inleggeld;
    private double totaalInleggeld;
    private int sCode;
    private int taCode;
    private int rondeNr;
    private int afvallerplek;
    private int aantalSpelers;
    private static SpelerPlek tafelKeuze;

    private ArrayList<SpelerPlek> tafelInfo;

    public HuidigToernooi(HoofdScherm hoofdscherm) {
        this.hoofdScherm = hoofdscherm;
        initComponents();
        vulCombobox();
    }

    public void vulCombobox() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();

        try {
            Connection conn = Connector.getConnection();
            Statement stat = conn.createStatement();
            ResultSet result = stat.executeQuery("SELECT PE.naam FROM poker_event PE WHERE PE.pe_code IN(SELECT t.pe_code FROM toernooi t)");

            while (result.next()) {
                String peNaam = result.getString("naam");
                model.addElement(peNaam);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "SQL fout bij het ophalen van poker_event: " + e.toString());
        }
        this.cbToernooien.setModel(model);
    }

    public static SpelerPlek getTafelKeuze() {
        return tafelKeuze;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbToernooi = new javax.swing.JLabel();
        lbSpelers = new javax.swing.JLabel();
        btClose = new javax.swing.JButton();
        btToonSpelers = new javax.swing.JButton();
        cbToernooien = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        tfPeCode = new javax.swing.JTextField();
        tfNaam = new javax.swing.JTextField();
        tfDatum = new javax.swing.JTextField();
        tfAantalDeelnemers = new javax.swing.JTextField();
        tfPostcode = new javax.swing.JTextField();
        tfHuisnummer = new javax.swing.JTextField();
        tfInleggeld = new javax.swing.JTextField();
        tfTotaalInleggeld = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbTafel = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Huidig Toernooi");

        lbToernooi.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lbToernooi.setText("Toernooi gegevens:");

        lbSpelers.setText("Tafels:");

        btClose.setText("Sluit");
        btClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCloseActionPerformed(evt);
            }
        });

        btToonSpelers.setText("Toon spelers");
        btToonSpelers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btToonSpelersActionPerformed(evt);
            }
        });

        cbToernooien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbToernooienActionPerformed(evt);
            }
        });

        jLabel1.setText("Kies toernooi:");

        jLabel2.setText("pe code:");

        jLabel3.setText("Naam:");

        jLabel4.setText("Datum:");

        jLabel5.setText("Aantal Deelnemers:");

        jLabel6.setText("Postcode:");

        jLabel7.setText("Huisnummer:");

        jLabel8.setText("Inleggeld:");

        jLabel9.setText("Totaal inleggeld:");

        tfPeCode.setEditable(false);

        tfNaam.setEditable(false);

        tfDatum.setEditable(false);

        tfAantalDeelnemers.setEditable(false);

        tfPostcode.setEditable(false);

        tfHuisnummer.setEditable(false);

        tfInleggeld.setEditable(false);

        tfTotaalInleggeld.setEditable(false);

        tbTafel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Tafel ID", "Aantal spelers", "Ronde nummer"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbTafel);

        jButton1.setText("start/refresh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Tafelverdeling");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbToernooi)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9))
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tfPeCode)
                                    .addComponent(tfNaam)
                                    .addComponent(tfDatum)
                                    .addComponent(tfAantalDeelnemers)
                                    .addComponent(tfPostcode)
                                    .addComponent(tfHuisnummer)
                                    .addComponent(tfInleggeld)
                                    .addComponent(tfTotaalInleggeld, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))))
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbSpelers)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(239, 239, 239)
                                .addComponent(btClose))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbToernooien, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addComponent(jLabel1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btToonSpelers)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbToernooien)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbToernooi)
                    .addComponent(lbSpelers))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(tfPeCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(tfNaam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(tfDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(tfAantalDeelnemers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(tfPostcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(tfHuisnummer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(tfInleggeld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(tfTotaalInleggeld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btClose)
                    .addComponent(btToonSpelers))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btToonSpelersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btToonSpelersActionPerformed
        try {
            String toernooiKeuzeNaam = (String) cbToernooien.getSelectedItem();
            int tafelKeuzeIndex = tbTafel.getSelectedRow();
            tafelKeuze = tafelInfo.get(tafelKeuzeIndex);
            HuidigToernooiSpelerRegistratie huidigToernooiSpelerRegistratie = new HuidigToernooiSpelerRegistratie(this, toernooiKeuzeNaam);
            huidigToernooiSpelerRegistratie.setVisible(true);
        } catch (ArrayIndexOutOfBoundsException e) {

        }
    }//GEN-LAST:event_btToonSpelersActionPerformed

    private void btCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCloseActionPerformed
        this.dispose();
    }//GEN-LAST:event_btCloseActionPerformed

    private void cbToernooienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbToernooienActionPerformed
        String toernooiKeuzeNaam = (String) cbToernooien.getSelectedItem();

        //Tafel gegevens voorbereiden
        String[] kolommen = {"Tafel ID", "Aantal spelers", "Ronde nummer"};
        tafelInfo = new ArrayList();
        DefaultTableModel tafelLijst = new DefaultTableModel(kolommen, 0);

        //Alle relevante data ophalen uit database
        try {
            //Alle gegevens over een toernooi ophalen
            Connection conn = Connector.getConnection();
            String prepStringGegevens = "SELECT PE.pe_code, PE.naam, PE.datum, PE.aantal_deelnemers, PE.huisnummer, PE.postcode, T.inleggeld, T.totaal_inleggeld, SP.s_code, SP.ta_code, SP.rondeNr, SP.afvallerplek FROM poker_event PE left join toernooi T on PE.pe_code = T.pe_code left join speler_plek SP on SP.pe_code = PE.pe_code where PE.naam=?";
            PreparedStatement prepStatToernooiGegevens = conn.prepareStatement(prepStringGegevens);
            prepStatToernooiGegevens.setString(1, toernooiKeuzeNaam);
            ResultSet resultToernooiGegevens = prepStatToernooiGegevens.executeQuery();

            while (resultToernooiGegevens.next()) {
                peCode = resultToernooiGegevens.getInt("pe_code");
                naam = resultToernooiGegevens.getString("naam");
                datum = resultToernooiGegevens.getString("datum");
                aantalDeelnemers = resultToernooiGegevens.getInt("aantal_deelnemers");
                huisnummer = resultToernooiGegevens.getString("huisnummer");
                postcode = resultToernooiGegevens.getString("postcode");
                inleggeld = resultToernooiGegevens.getDouble("inleggeld");
                totaalInleggeld = resultToernooiGegevens.getDouble("totaal_inleggeld");
                sCode = resultToernooiGegevens.getInt("s_code");
                taCode = resultToernooiGegevens.getInt("ta_code");
                rondeNr = resultToernooiGegevens.getInt("rondeNr");
                afvallerplek = resultToernooiGegevens.getInt("afvallerplek");

            }

            //Aantal tafels
            String prepStringTafelAantal = "select distinct ta_code, rondeNr  from speler_plek where pe_code = ?";
            PreparedStatement prepStatTafelAantal = conn.prepareStatement(prepStringTafelAantal);
            prepStatTafelAantal.setInt(1, peCode);
            ResultSet resultTafelAantal = prepStatTafelAantal.executeQuery();
            while (resultTafelAantal.next()) {
                int tafel = resultTafelAantal.getInt("ta_code");
                int rondeNummer = resultTafelAantal.getInt("rondeNr");

                //Aantal spelers aan een tafel
                Connection connTafel = Connector.getConnection();
                String prepStringTafelSpelers = "Select count(*) as aantal_spelers from speler_plek where pe_code = ? and ta_code = ?";
                PreparedStatement prepStatTafelSpelers = connTafel.prepareStatement(prepStringTafelSpelers);
                prepStatTafelSpelers.setInt(1, peCode);
                prepStatTafelSpelers.setInt(2, tafel);
                ResultSet resultTafelAantalSpelers = prepStatTafelSpelers.executeQuery();

                while (resultTafelAantalSpelers.next()) {
                    aantalSpelers = resultTafelAantalSpelers.getInt("aantal_spelers");

                    //TafelInfo opslaan
                    SpelerPlek tafelSP = new SpelerPlek(tafel, rondeNummer);
                    tafelInfo.add(tafelSP);
                    String[] tafelOutput = {String.valueOf(tafel), String.valueOf(aantalSpelers), String.valueOf(rondeNummer)};
                    tafelLijst.addRow(tafelOutput);
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "SQL fout bij het ophalen van poker_event, toernooi en speler_plek: " + e.toString());
        }

        //Alle textFields vullen
        tfPeCode.setText("" + peCode);
        tfNaam.setText(naam);
        tfDatum.setText(datum);
        tfAantalDeelnemers.setText("" + aantalDeelnemers);
        tfPostcode.setText(postcode);
        tfHuisnummer.setText(huisnummer);
        tfInleggeld.setText("" + inleggeld);
        tfTotaalInleggeld.setText("" + totaalInleggeld);

        //Tafel gegevens vullen
        tbTafel.setModel(tafelLijst);
    }//GEN-LAST:event_cbToernooienActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        NewJFrame newjframe = new NewJFrame();
        newjframe.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    public static int getPeCode() {
        return peCode;
    }

    public int getRondeNr() {
        String toernooiKeuzeNaam = (String) cbToernooien.getSelectedItem();
        int peCode = 0;
        int rondeNr = 0;
        try {
            Connection conn = Connector.getConnection();
            String prepString = "SELECT distinct SP.pe_code from speler_plek SP join poker_event PE on SP.pe_code = PE.pe_code where PE.naam = ?";
            PreparedStatement prepStat = conn.prepareStatement(prepString);
            prepStat.setString(1, toernooiKeuzeNaam);
            ResultSet result = prepStat.executeQuery();
            peCode = result.getInt("pe_code");
        } catch (SQLException e) {

        }

        if (peCode == 0) {
            return 0;
        } else {
            try {
                Connection conn = Connector.getConnection();
                String prepStringRondeNr = "select distinct SP.rondeNr from speler_plek SP where pe_code = ?";
                PreparedStatement prepStatRondeNr = conn.prepareStatement(prepStringRondeNr);
                prepStatRondeNr.setInt(1, peCode);
                ResultSet resultRondeNr = prepStatRondeNr.executeQuery();
                rondeNr = resultRondeNr.getInt("RondeNr");
            } catch (SQLException e) {

            }

            return rondeNr;
        }
    }

    public boolean winstGevend() {
        double huur = 0;
        int peCode = 0;
        int aantalDeelnemers = 0;
        double inleggeld = 0;

        //huur bepalen
        try {
            String toernooiKeuzeNaam = (String) cbToernooien.getSelectedItem();
            Connection conn = Connector.getConnection();
            String prepStringHuur = "select L.huur from locatie L join poker_event PE on PE.postcode = L.postcode and PE.huisnummer = L.huisnummer where PE.naam = ?";
            PreparedStatement prepStatHuur = conn.prepareStatement(prepStringHuur);
            prepStatHuur.setString(1, toernooiKeuzeNaam);
            ResultSet resultHuur = prepStatHuur.executeQuery();
            huur = resultHuur.getDouble("huur");

            //gegevens ophalen
            String prepStringPeCode = "Select pe_code from poker_event where naam = ?";
            String prepStringAantalDeelnemers = "select count(*) from inschrijving I where pe_code = ? and betaald = 1";
            String prepStringInleggeld = "select inleggeld from toernooi T where pe_code = ?";

            PreparedStatement prepStatPeCode = conn.prepareStatement(prepStringPeCode);
            prepStatPeCode.setString(1, toernooiKeuzeNaam);
            ResultSet resultPeCode = prepStatPeCode.executeQuery();
            peCode = resultPeCode.getInt("pe_code");

            PreparedStatement prepStatAantalDeelnemers = conn.prepareStatement(prepStringAantalDeelnemers);
            prepStatAantalDeelnemers.setInt(1, peCode);
            ResultSet resultAantalDeelnemers = prepStatAantalDeelnemers.executeQuery();
            aantalDeelnemers = resultAantalDeelnemers.getInt("count(*)");

            PreparedStatement prepStatInleggeld = conn.prepareStatement(prepStringInleggeld);
            prepStatInleggeld.setInt(1, peCode);
            ResultSet resultInleggeld = prepStatInleggeld.executeQuery();
            inleggeld = resultInleggeld.getDouble("inleggeld");

        } catch (SQLException e) {

        }

        //huur vergelijken met totaal inleggeld
        double totaalInleggeld = inleggeld * aantalDeelnemers;
        if (totaalInleggeld * 0.25 > huur) {
            return true;
        } else {
            return false;
        }

    }

    public void prijzenGeldUitkeren() {
        String toernooiKeuzeNaam = (String) cbToernooien.getSelectedItem();
        int peCode = 0;
        int eerste = 0;
        int tweede = 0;
        int derde = 0;
        //winnaars ophalen
        try {
            Connection conn = Connector.getConnection();
            String prepStringPeCode = "Select pe_code from poker_event where naam = ?";
            PreparedStatement prepStatPeCode = conn.prepareStatement(prepStringPeCode);
            prepStatPeCode.setString(1, toernooiKeuzeNaam);
            ResultSet resultPeCode = prepStatPeCode.executeQuery();
            peCode = resultPeCode.getInt("pe_code");

            String prepEerste = "select s_code from speler_plek where afvallerplek = 1 and pe_code = ?";
            PreparedStatement prepStatEerste = conn.prepareStatement(prepEerste);
            prepStatEerste.setInt(1, peCode);
            ResultSet resultEerste = prepStatEerste.executeQuery();
            eerste = resultEerste.getInt("s_code");

            String prepTweede = "select s_code from speler_plek where afvallerplek = 2 and pe_code = ?";
            PreparedStatement prepStatTweede = conn.prepareStatement(prepTweede);
            prepStatTweede.setInt(1, peCode);
            ResultSet resultTweede = prepStatTweede.executeQuery();
            tweede = resultTweede.getInt("s_code");

            String prepDerde = "select s_code from speler_plek where afvallerplek = 3 and pe_code = ?";
            PreparedStatement prepStatDerde = conn.prepareStatement(prepDerde);
            prepStatDerde.setInt(1, peCode);
            ResultSet resultDerde = prepStatDerde.executeQuery();
            derde = resultDerde.getInt("s_code");

        } catch (SQLException e) {

        }

        //Winst uitkeren
        int aantalDeelnemers = 0;
        double inleggeld = 0;
        try {
            Connection conn = Connector.getConnection();
            String prepStringPeCode = "Select pe_code from poker_event where naam = ?";
            String prepStringAantalDeelnemers = "select count(*) from inschrijving I where pe_code = ? and betaald = 1";
            String prepStringInleggeld = "select inleggeld from toernooi T where pe_code = ?";

            PreparedStatement prepStatPeCode = conn.prepareStatement(prepStringPeCode);
            prepStatPeCode.setString(1, toernooiKeuzeNaam);
            ResultSet resultPeCode = prepStatPeCode.executeQuery();
            peCode = resultPeCode.getInt("pe_code");

            PreparedStatement prepStatAantalDeelnemers = conn.prepareStatement(prepStringAantalDeelnemers);
            prepStatAantalDeelnemers.setInt(1, peCode);
            ResultSet resultAantalDeelnemers = prepStatAantalDeelnemers.executeQuery();
            aantalDeelnemers = resultAantalDeelnemers.getInt("count(*)");

            PreparedStatement prepStatInleggeld = conn.prepareStatement(prepStringInleggeld);
            prepStatInleggeld.setInt(1, peCode);
            ResultSet resultInleggeld = prepStatInleggeld.executeQuery();
            inleggeld = resultInleggeld.getDouble("inleggeld");
        } catch (SQLException e) {

        }
        double totaalInleggeld = inleggeld * aantalDeelnemers;
        double eersteGeld = totaalInleggeld * 0.4;
        double tweedeGeld = totaalInleggeld * 0.25;
        double derdeGeld = totaalInleggeld * 0.1;

        try {
            Connection conn = Connector.getConnection();
            String prepStringUpdate = "update speler set totaalgewonnengeld = ? where s_code =?";
            PreparedStatement prepStateUpdate = conn.prepareStatement(prepStringUpdate);
            prepStateUpdate.setDouble(1, eersteGeld);
            prepStateUpdate.setInt(2, eerste);
            prepStateUpdate.executeUpdate();

            prepStateUpdate.setDouble(1, tweedeGeld);
            prepStateUpdate.setInt(2, tweede);
            prepStateUpdate.executeUpdate();

            prepStateUpdate.setDouble(1, derdeGeld);
            prepStateUpdate.setInt(2, derde);
            prepStateUpdate.executeUpdate();

        } catch (SQLException e) {

        }

    }

    public static String krijgVerdeling(int pe_code) {
        String verdeling = "";
        try {
            Connection conn = Connector.getConnection();

            //Statement object aanmaken met behulp van zojuist aangemaakte connectie
            Statement stat = conn.createStatement();

            //Klanten ophalen uit database
            //ResultSet result = stat.executeQuery("SELECT SP.naam, SP.s_code, I.betaald from speler SP join inschrijving I on I.s_code = I.s_code WHERE I.pe_code = 1");
            String prepString = "SELECT verdeling_tafels FROM toernooi WHERE pe_code = ?";
            //String prepString = "select * from speler S join speler_plek SP on S.s_code=SP.s_code where ta_code = ?";
            PreparedStatement prepStat = conn.prepareStatement(prepString);
            prepStat.setInt(1, pe_code);
            ResultSet result = prepStat.executeQuery();

            while (result.next()) {
                verdeling = result.getString("verdeling_tafels");
            }
            return verdeling;

        } catch (SQLException exc) {

        }
        return verdeling;
    }

    public static int krijgLaatsteTafel(int pe_code) {
        int laatsteTafel = 0;
        try {
            Connection conn = Connector.getConnection();

            //Statement object aanmaken met behulp van zojuist aangemaakte connectie
            Statement stat = conn.createStatement();

            //Klanten ophalen uit database
            //ResultSet result = stat.executeQuery("SELECT SP.naam, SP.s_code, I.betaald from speler SP join inschrijving I on I.s_code = I.s_code WHERE I.pe_code = 1");
            String prepString = "SELECT max(ta_code) FROM speler_plek WHERE pe_code=?";
            //String prepString = "select * from speler S join speler_plek SP on S.s_code=SP.s_code where ta_code = ?";
            PreparedStatement prepStat = conn.prepareStatement(prepString);
            prepStat.setInt(1, pe_code);
            ResultSet result = prepStat.executeQuery();

            laatsteTafel = result.getInt("max(ta_code)");

        } catch (SQLException exc) {

        }
        return laatsteTafel;

    }

    public static int check(int pe_code) {
        int aantal = 0;
        try {
            Connection conn = Connector.getConnection();

            //Statement object aanmaken met behulp van zojuist aangemaakte connectie
            Statement stat = conn.createStatement();

            //Klanten ophalen uit database
            //ResultSet result = stat.executeQuery("SELECT SP.naam, SP.s_code, I.betaald from speler SP join inschrijving I on I.s_code = I.s_code WHERE I.pe_code = 1");
            String prepString = "SELECT count(I.s_code) FROM inschrijving I join speler_plek P on I.s_code = P.s_code WHERE I.pe_code=? AND P.ta_code is null";
            //String prepString = "select * from speler S join speler_plek SP on S.s_code=SP.s_code where ta_code = ?";
            PreparedStatement prepStat = conn.prepareStatement(prepString);
            prepStat.setInt(1, pe_code);
            ResultSet result = prepStat.executeQuery();

            aantal = result.getInt("count(I.s_code)");
            return aantal;

        } catch (SQLException exc) {

        }
        return aantal;
    }

    public static int check2(int pe_code, int ronde) {
        int aantal = 0;
        try {
            Connection conn = Connector.getConnection();

            //Statement object aanmaken met behulp van zojuist aangemaakte connectie
            Statement stat = conn.createStatement();

            //Klanten ophalen uit database
            //ResultSet result = stat.executeQuery("SELECT SP.naam, SP.s_code, I.betaald from speler SP join inschrijving I on I.s_code = I.s_code WHERE I.pe_code = 1");
            String prepString = "SELECT rondeNr FROM speler_plek WHERE pe_code=? AND afvallerplek is null";
            //String prepString = "select * from speler S join speler_plek SP on S.s_code=SP.s_code where ta_code = ?";
            PreparedStatement prepStat = conn.prepareStatement(prepString);
            prepStat.setInt(1, pe_code);
            ResultSet result = prepStat.executeQuery();

            aantal = result.getInt("count(rondeNr)");
            return aantal;

        } catch (SQLException exc) {

        }
        return aantal;
    }

    public static void maakTafels(int ronde, int pe_code, String verdeling) {
        String arrayTafels1[] = new String[5];
        int grote = 0;
        int aantal = 0;
        int laatsteTafel = krijgLaatsteTafel(pe_code);
        if (laatsteTafel == 0) {

            try {
                Connection conn = Connector.getConnection();

                //Statement object aanmaken met behulp van zojuist aangemaakte connectie
                Statement stat = conn.createStatement();

                int x = 0;
                // while deze niet nul is
                while (check(pe_code) > 0) {
                    //int spelerID = result.getInt("s_code)");

                    x = x + 1;
                    try {
                        arrayTafels1[x] = verdeling.split("\\|")[x];
                        System.out.println(arrayTafels1[x]);
                    } catch (ArrayIndexOutOfBoundsException e) {

                    }
                    if (!arrayTafels1[x].equals("")) {

                        try {
                            grote = Integer.parseInt(arrayTafels1[x].split("\\*")[0]);
                            aantal = Integer.parseInt(arrayTafels1[x].split("\\*")[1]);

                        } catch (ArrayIndexOutOfBoundsException e) {

                        }
                        laatsteTafel = laatsteTafel + 1;
                        //aantal + 1 als grote is bereikt

                        for (int y = 0; y != aantal; y++) {
                            for (int k = 0; k != grote; k++) {
                                String prepString = "SELECT s_code FROM inschrijving I join speler_plek on I.s_code=P.s_code WHERE betaald =1 AND pe_code =? AND P.ta_code is null limit ?";
                                //String prepString = "select * from speler S join speler_plek SP on S.s_code=SP.s_code where ta_code = ?";
                                PreparedStatement prepStat = conn.prepareStatement(prepString);
                                prepStat.setInt(1, pe_code);
                                prepStat.setInt(2, grote);
                                ResultSet result = prepStat.executeQuery();
                                while (result.next()) {
                                    int spelerID2 = result.getInt("s_code)");
                                    conn = Connector.getConnection();
                                    stat = conn.createStatement();

                                    String prepStatInsertKlant = "INSERT INTO speler_plek (s_code,pe_code,ta_code,rondeNr) "
                                            + "VALUES (?,?,?,?)";
                                    prepStat = conn.prepareStatement(prepStatInsertKlant);

                                    prepStat.setInt(1, spelerID2);
                                    prepStat.setInt(2, pe_code);
                                    prepStat.setInt(3, laatsteTafel);
                                    prepStat.setInt(4, ronde);

                                    prepStat.executeUpdate();
                                }
                            }

                        }

                    }
                }

            } catch (SQLException exc) {

            }

        } else {
            try {
                Connection conn = Connector.getConnection();

                //Statement object aanmaken met behulp van zojuist aangemaakte connectie
                Statement stat = conn.createStatement();

                int x = 0;
                // while deze niet nul is
                while (check2(pe_code, ronde) > 0) {
                    //int spelerID = result.getInt("s_code)");

                    x = x + 1;
                    try {
                        arrayTafels1[x] = verdeling.split("\\|")[x];
                        System.out.println(arrayTafels1[x]);
                    } catch (ArrayIndexOutOfBoundsException e) {

                    }
                    if (!arrayTafels1[x].equals("")) {
                        try {
                            grote = Integer.parseInt(arrayTafels1[x].split("\\*")[0]);
                            aantal = Integer.parseInt(arrayTafels1[x].split("\\*")[1]);

                        } catch (ArrayIndexOutOfBoundsException e) {

                        }
                        laatsteTafel = laatsteTafel + 1;
                        //aantal + 1 als grote is bereikt
                        for (int y = 0; y != aantal; y++) {
                            for (int k = 0; k != grote; k++) {
                                String prepString = "SELECT s_code FROM speler_plek WHERE afvallerplek is null AND pe_code =? limit ? ";
                                //String prepString = "select * from speler S join speler_plek SP on S.s_code=SP.s_code where ta_code = ?";
                                PreparedStatement prepStat = conn.prepareStatement(prepString);
                                prepStat.setInt(1, pe_code);
                                prepStat.setInt(2, grote);
                                ResultSet result = prepStat.executeQuery();
                                while (result.next()) {
                                    int spelerID2 = result.getInt("s_code)");
                                    conn = Connector.getConnection();
                                    stat = conn.createStatement();

                                    String prepStatInsertKlant = "UPDATE speler_plek set ta_code=?,rondeNr=? WHERE s_code=? AND pe_code=?";
                                    prepStat = conn.prepareStatement(prepStatInsertKlant);
                                    ;
                                    prepStat.setInt(1, laatsteTafel);
                                    prepStat.setInt(2, ronde);
                                    prepStat.setInt(3, spelerID2);
                                    prepStat.setInt(4, pe_code);

                                    prepStat.executeUpdate();
                                }
                            }

                        }
                    }
                }
            } catch (SQLException exc) {

            }

        }
    }

    public void doeWat(int pe_code) {
        String verdeling = krijgVerdeling(pe_code);
        //String verdeling = "/|1|8*3|7*6|4*5/|2|4*1|5*2";
        String arrayTafels[] = new String[3];
        int ronde = getRondeNr();
        if (ronde == 0) {
            ronde = 1;

        } else {
            ronde = ronde + 1;

        }

        try {
            arrayTafels[ronde - 1] = verdeling.split("\\/")[ronde + 1];

        } catch (ArrayIndexOutOfBoundsException e) {

        }
        if (!arrayTafels[ronde - 1].equals("")) {
            maakTafels(1, 1, "");
        }

    }

    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btClose;
    private javax.swing.JButton btToonSpelers;
    private javax.swing.JComboBox cbToernooien;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbSpelers;
    private javax.swing.JLabel lbToernooi;
    private javax.swing.JTable tbTafel;
    private javax.swing.JTextField tfAantalDeelnemers;
    private javax.swing.JTextField tfDatum;
    private javax.swing.JTextField tfHuisnummer;
    private javax.swing.JTextField tfInleggeld;
    private javax.swing.JTextField tfNaam;
    private javax.swing.JTextField tfPeCode;
    private javax.swing.JTextField tfPostcode;
    private javax.swing.JTextField tfTotaalInleggeld;
    // End of variables declaration//GEN-END:variables
}
